data4 <- xmlTreeParse(fileUrl, useInternalNodes = TRUE)
rootNode <- xmlRoot(data4)
names(rootNode)
rootNode <- rootNode[[1]]
names(rootNode)
zipCodes <- xpathSApply(rootNode, "//zipcode", xmlValue)
table(zipCodes)
sum(zipCodes == 21231)
sum(zipCodes == 21231)
?download.file
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileUrl, "housingIdaho.csv")
?fread
??fread
install.packages(jsonlite)
install.packages("jsonlite")
library(jsonlite)
View(data)
detach("package:jsonlite", unload=TRUE)
library(data.table)
install.packages(data.table)
install.packages("data.table")
library(data.table)
tables()
DF = data.frame(x.rnorm(9), y=rep(c("a", "b", "c"), each = 3), z=rnorm(9))
DF = data.frame(x=rnorm(9), y=rep(c("a", "b", "c"), each = 3), z=rnorm(9))
head(DF, 3)
DT = data.table(x=rnorm(9), y=rep(c("a", "b", "c"), each = 3), z=rnorm(9))
tables()
DT[2, ]
head(DT)
DT[, 2]
DT[2, ]
names(DT)
DT[, list(mean(x), sum(z))]
class(DT$X)
class(DT$x)
class(DT$y)
DT[, w:=z^2]
names(Dt)
names(DT)
?fread
data5 <- fread("housingIdaho.csv")
tables()
names(data4)
names(data5)
str(data5$pwgtp15 )
str(data5$pwgtp15)
str(data5$SEX)
table(data5$SEX)
DT[,mean(pwgtp15),by=SEX]
data5[,mean(pwgtp15),by=SEX]
setwd(workingDirectory)
install.packages("RMySQL")
library(RMySQL)
library(httr)
oauth_endpoints("github")
oauth_endpoints("github")
myapp <- oaut_app("github",
key = "33b1d4e05e0bc0b111f8",
secret = "8dc36b59ba80d67761ca3de8a7a532e763c05ad2")
# Personal credentials
myapp <- oauth_app("github",
key = "33b1d4e05e0bc0b111f8",
secret = "8dc36b59ba80d67761ca3de8a7a532e763c05ad2")
github_token <- oaut2.0_token(oaut_endpoints("github"), myapp)
github_token <- oauth2.0_token(oaut_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages(httpuv)
install.packages("httpuv")
library(httpuv)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
str(req)
length(req)
req2 <- jsonlite::fromJSON(toJSON(req))
install.packages("jsonlite")
install.packages("jsonlite")
library(jsonlite)
library("jsonlite")
install.packages("jsonlite")
install.packages("jsonlite")
library(jsonlite)
req2 <- jsonlite::fromJSON(toJSON(req))
req2 <- fromJSON(req)
req2 <- fromJSON(GET("https://api.github.com/users/jtleek/repos", gtoken))
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
## Question 1. Api connection and data processing
library(httr)
# Find Oaut Settings
oauth_endpoints("github")
# Personal credentials
myapp <- oauth_app("github",
key = "33b1d4e05e0bc0b111f8",
secret = "8dc36b59ba80d67761ca3de8a7a532e763c05ad2")
# Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
# Use API
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
req2 <- fromJSON(GET("https://api.github.com/users/jtleek/repos", gtoken))
req2 <- fromJSON("https://api.github.com/users/jtleek/repos")
install.packages("curl")
req2 <- fromJSON("https://api.github.com/users/jtleek/repos")
names(req2)
req2[req2$name == "datasharing"]
req2[req2$name == "datasharing", ]
class(req2[req2$name == "datasharing", ])
req3 <- req2[req2$name == "datasharing", ]
names(req3)
req3[, "created_at"]
?nchar()
?nchar
x <- 1:10
nchar(x)
x <- c("HOLA", "HOLA2")
nchar(x)
con = url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode = readLines(con)
head(htmlCode)
class(htmlCode)
class(1)
class(htmlCode[1])
nchar(htmlCode[1])
?vapply
?read.lines
?readLines
nchar(10)
nchar(htmlCode[10])
?nchar
nchar(htmlCode[10], htmlCode[20])
nchar(c(htmlCode[10], htmlCode[20])
)
nchar(c(htmlCode[10], htmlCode[20], htmlCode[30], htmlCode[100]))
close(con)
nchar(c(htmlCode[10], htmlCode[20], htmlCode[30], htmlCode[100]))
?read.foo
?read.for
?read.for
??read.for
getwd()
workingDirectory <- getwd()
workingDirectory
setwd("~/GitHub/data-science/c03/W2")
ls
ls()
read.fortran("getdata-wksst8110.for")
q5 <- read.fwf("getdata-wksst8110.for")
q5 <- read.fwf("getdata-wksst8110.for",
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4)))
q5 <- read.fwf("getdata-wksst8110.for",
skip=4,
widths=c(12, 7,4, 9,4, 9,4, 9,4))
head(q4)
head(q5)
?sum
sum(q5[, 4])
setwd(workingDirectory)
x <- c(1,3,5,7)
var(x)
?var
length(x)
mean(x)
16/44
16/4
x
y <- c(9, 1, 1, 9)
sum(y)
20/4
20/3
sd(x)
rankall <- function(outcome, num = "best") {
## Read Outocme Data
data <- read.csv(file="outcome-of-care-measures.csv", header=T, sep=",", colClasses = "character")
## Check outcome is valid
if(outcome == "heart attack") cOutcome <- 11
else if(outcome == "heart failure") cOutcome <- 17
else if(outcome == "pneumonia") cOutcome <- 23
else stop("invalid outcome")
## For each state find the hospital of the given rank
levels <- sort(unique(data[, 7]))
result <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(result) <- c("hospital", "state")
for(i in c(1:length(levels))) {
## we create smaller dd
stateData <- data[data$State == levels[i], ]
## we prepare for loop
dRows <- nrow(stateData)
vOutcome = numeric()
vHospital = character()
count = 1
for(j in c(1:dRows)) {
if(stateData[j, cOutcome] != "Not Available") {
vOutcome[count] <- as.numeric(stateData[j, cOutcome])
vHospital[count] <- stateData[j, 2]
count = count + 1
}
}
## we combine and sort the results
rMatrix <- cbind(vHospital, vOutcome)
rMatrix <- as.matrix(rMatrix[order(as.numeric(rMatrix[,2]), rMatrix[,1]), ])
## we select with hospital goes to the data frame
if(num == "best") result[i, ] <- c(rMatrix[1, 1], levels[i])
else if(num == "worst") result[i, ] <- c(rMatrix[nrow(rMatrix), 1], levels[i])
else if(num <= nrow(rMatrix)) result[i, ] <- c(rMatrix[num], levels[i])
else result[i, ] <- c("<NA>", levels[i])
}
## Return a data frame with the hospital names and state
result
}
?which()
?download.file()
?fread()
?read.csv
workingDirectory <- getwd()
setwd("~/GitHub/data-science/c03/W3")
fileUrl <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
fileUrl <- http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv
fileUrl <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, "communities.csv")
x <- read.csv("communities.csv")
names(x
)
y <- x[x$ACR = 3 & x$AGS=6,. ]
y <- x[x$ACR == 3 & x$AGS == 6,. ]
y <- x[x$ACR == 3 & x$AGS == 6, ]
names(y)
nrow(y)
which(y)
y <- which(x[x$ACR == 3 & x$AGS == 6, ])
y <- which(x$ACR == 3 & x$AGS == 6)
head(y)
?which
y <- which(x$ACR == 3 & x$AGS == 6)
y
?which
install.packages("jpeg")
library(jpeg)
?readJPEG()
readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg ")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(fileUrl, "teacher.jpg")
readJPEG("teacher.jpg")
img <- readJPEG("teacher.jpg")
head(img)
img <- readJPEG("teacher.jpg", native = TRUE)
head(img)
table(img)
?quantile
quantile(img)
fileUrl <- "http://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(fileUrl, "teacher.jpg")
img <- readJPEG("teacher.jpg", native = TRUE)
quantile(img, probs=c(0.3,0.8))
img <- readJPEG("teacher.jpg", native = TRUE)
quantile(img, probs=c(0.3,0.8))
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(fileUrl, "teacher.jpg")
img <- readJPEG("teacher.jpg", native = TRUE)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(fileUrl, "teacher.jpg", method="curl")
img <- readJPEG("teacher.jpg", native = TRUE)
download.file(fileUrl, "teacher2.jpg", method="curl")
## Question 1
fileUrl <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, "communities.csv")
x <- read.csv("communities.csv")
# acres on variable ACR -> [3] greater or equal 10
# sales of agriclture AGS -> [6] +10.000
y <- which(x$ACR == 3 & x$AGS == 6)
## Question 2
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(fileUrl, "teacher2.jpg")
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(fileUrl, "teacher2.jpg")
img <- readJPEG("teacher2.jpg", native = TRUE)
?download.file
download.file(fileUrl, "teacher2.jpg", method = "wget")
img <- readJPEG("teacher.jpg", native = TRUE)
img <- readJPEG("teacher.jpg", native = TRUE)
quantile(img, probs=c(0.3,0.8))
## Question 1
fileUrl <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileUrl, "communities.csv")
x <- read.csv("communities.csv")
# acres on variable ACR -> [3] greater or equal 10
# sales of agriclture AGS -> [6] +10.000
y <- which(x$ACR == 3 & x$AGS == 6)
y
img <- readJPEG("teacher.jpg", native = TRUE)
quantile(img, probs=c(0.3,0.8))
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl, "gdp.csv")
gdp <- read.csv("gdp.csv")
names(gdp)
nrow(Gdp)
nrow(gdp)
ncol(gdp)
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl2, "educ.csv")
educ <- read.csv("educ.csv")
names(Educ)
names(educ)
levels(educ[,. 1])
levels(educ[, 1])
levels(educ)
names(educ)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl, "gdp.csv")
gdp <- read.csv("gdp.csv")
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl2, "educ.csv")
educ <- read.csv("educ.csv")
levels(gdp[, 1])
levels(educ[, 1])
length(levels(educ[, 1]))
length(levels(gdp[, 1]))
?match
match(gdp[, 1]. educ[, 1])
match(gdp[, 1], educ[, 1])
sum(!is.na(match(gdp[, 1], educ[, 1])))
sum(match(gdp[, 1], educ[, 1]))
class(gdp[, 1])
class(educ[, 1])
length(levels(gdp[, 1]))
gdp[, 1]
lGDP <- levels(gdp[, 1] != "")
lGDP
lGDP <- levels(!is.na(gdp[, 1]))
lGDP
gdp[, 1]
educ[, 1]
?match
match(gdp[, 1], educ[, 1])
sum(!is.na(match(gdp[, 1], educ[, 1])))
x <- levels(gdp[, 1])
x <- x[x != ""]
x
names(gdp)
levels(gdp[, 2])
levels(gdp[, 3])
levels(gdp[, 4])
levels(gdp[, 5])
levels(gdp[, 6])
levels(gdp[, 7])
levels(gdp[, 8])
levels(gdp[, 1])
names(educ)
levels(educ[, 1])
sum(!is.na(matches(levels(gdp[, 1]), levels(educ[, 1]))))
sum(!is.na(match(levels(gdp[, 1]), levels(educ[, 1]))))
gdp[, 2]
gdp2 <- gdp[5:194,]
levels(gdp2[, 1])
nrow(gdp2)
gdp2[, 1] <- as.factor(gdp2[, 1])
levels(gdp2[, 1])
names(gdp2)
gdp2$x
gdp2$X
gdp2$X <- as.factor(gdp2$X)
gdp2$X
gdp2$X <- factor(gdp2$X)
levels(gdp2$X)
match(gdp2$X, educ[, 1])
sum(match(gdp2$X, educ[, 1]))
sum(!is.na(match(gdp2$X, educ[, 1])))
names(gdp2)
gdp[, 2]
gdp2[5, ]
gdp2[1, ]
gdp2[, 2]
?order
gdp3 <- order(-gdp2[, 2])
gdp3 <- gdp2[order(-gdp2[, 2]), ]
gdp3 <- gdp2[order-(gdp2[, 2]), ]
gdp3 <- gdp2[order(gdp2[, 2]), ]
gdp3 <- gdp2[order(gdp2[, 2], decreasing = TRUE), ]
gdp3[, 2]
gdp3 <- gdp2[order(as.numeric(gdp2[, 2]), decreasing = TRUE), ]
gdp3[, 2]
gdp3$newrank <- as.numeric(gdp3[, 2])
gdp3$newrank
as.numeric(gdp2[, 2])
gdp2[, 2]
gdp2[1, 2]
as.numeric(gdp2[1, 2])
as.numeric(as.character(gdp2[1, 2]))
gdp3$newrank <- as.numeric(as.character(gdp3[, 2]))
gdp3$newrank
gdp4 <- gdp3[order(gdp3$newrank, decreasing = TRUE), ]
gdp4[, 2]
gdp4[13, 1]
head(gdp4, n=13)
tail(gdp4, n=2)
## Question 1
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(fileUrl, "gdp.csv")
gdp <- read.csv("gdp.csv")
fileUrl2 <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(fileUrl2, "educ.csv")
educ <- read.csv("educ.csv")
gdp[, 2]
gdp2 <- gdp[5:194, ]
gdp2[, 2]
gdp2[, 1]
gdp2[, 1] <- factor(gdp2[, 1])
gdp2[, 1]
sum(!is.na(match(gd2[, 1], educ[, 1])))
sum(!is.na(match(gdp2[, 1], educ[, 1])))
gdp2$newrank <- as.numeric(as.character(gdp2[, 2]))
gdp2$newrank
gdp2$[, 2]
gdp2[, 2]
gdp2[order(-gdp2$newrank), ]
gdp2[, 2]
gdp2 <- gdp2[order(-gdp2$newrank), ]
gdp2[, 2]
tail(gdp2)
head(gdp2, n=13)
names(educ)
names(gdp2)
nrow(gdp2)
gdp2[, 2]
names(Gdp2)
names(gdp2)
head(gdp2)
tail(gdp2)
head(gdp)
levels(gdp[, 6])
levels(gdp[, 7])
levels(gdp[, 8])
levels(gdp[, 9])
levels(gdp[, 10])
class(gdp[, 10])
class(gdp[, 9])
class(gdp[, 8])
class(gdp[, 7])
class(gdp[, 6])
names(educ)
levels(educ[3])
levels(educ[, 3])
?merge
names(gdp2)
names(educ)
gdp3 <- merge(gdp2, educ, by.x="X", by.y="CountryCode")
names(Gdp3)
names(gdp3)
levels(gdp3[, 13])
head(gdp3)
head(gdp3[, 2])
names(gdp3)
gdp3[, 2]
gdp3[, "newrank"]
levels(gdp3[, 13])
mean(split(gdp3, gdp3[, 13]))
sapply(split(gdp3, gdp3[, 13]) mean())
sapply(split(gdp3, gdp3[, 13]) mean)
?lapply
?split
sapply(split(gdp3, levels(gdp3[, 13])) mean)
sapply(gdp3, mean)
levels(gdp3[, 13])
x <- gdp3[gdp3[, 13] == "High income: nonOECD"]
x <- gdp3[gdp3[, 13] == "High income: nonOECD", ]
y <- gdp3[gdp3[, 13] == "High income: OECD", ]
mean(x)
?mean
mean(x, na.rm = TRUE)
mean(x[, 2])
mean(x[, 2], na.rm = TRUE)
names(x)
x[, 2]
mean(x$newrank)
mean(y$newrank)
sapply(split(gdp3, gdp3[, 13]) function(elt) mean(elt$newrank))
sapply(split(gdp3, gdp3[, 13]) function(elt) mean(elt$newrank))
sapply(gdp3, function(elt) mean(elt$newrank))
sapply(gdp3, function(elt) mean(elt$newrank)
)
mean(x$newrank)
x <- gdp3[gdp3[, 13] == "High income: nonOECD", ]
y <- gdp3[gdp3[, 13] == "High income: OECD", ]
mean(x$newrank)
mean(y$newrank)
names(Gdp3)
names(gdp3)
levels(gdp3[, 13])
gdp3[, 2]
gdp3[, "newrank"]
gdp3$groups1 = cut(gdp3$newrank, breaks=quantile(gdp3$newrank))
table(gdp3$groups1)
table(gdp3$groups1, gdp3[, 13])
View(table(gdp3$groups1, gdp3[, 13]))
library(Hmisc)
install.packages(Hmisc)
install.packages("Hmisc")
library(Hmisc)
gdp3$groups2 = cut2(gdp3$newrank, g=5)
table(gdp3$groups1, gdp3[, 13])
table(gdp3$groups2, gdp3[, 13])
